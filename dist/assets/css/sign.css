:root {
  --font-pri: "Roboto", serif;
  --size-hd: 10rem; }

.row {
  --col-gap: 2.4rem;
  --row-gap: 2.4rem;
  display: flex;
  flex-wrap: wrap;
  margin: 0 calc(var(--col-gap) / 2 * -1) calc(var(--row-gap) * -1); }

.col {
  width: 100%;
  padding: 0 calc(var(--col-gap) / 2);
  margin-bottom: var(--row-gap); }
  .col-11 {
    width: calc(11/12 * 100%); }
  .col-10 {
    width: calc(10/12 * 100%); }
  .col-9 {
    width: calc(9/12 * 100%); }
  .col-8 {
    width: calc(8/12 * 100%); }
  .col-7 {
    width: calc(7/12 * 100%); }
  .col-6 {
    width: 50%; }
  .col-5 {
    width: calc(5/12 * 100%); }
  .col-4 {
    width: calc(4/12 * 100%); }
  .col-3 {
    width: calc(3/12 * 100%); }
  .col-2 {
    width: calc(2/12 * 100%); }
  .col-1 {
    width: calc(1/12 * 100%); }

/*------------------------------------------------------------
	Clearfix
------------------------------------------------------------*/
/*------------------------------------------------------------
	Font
------------------------------------------------------------*/
/*------------------------------------------------------------
	Media
------------------------------------------------------------*/
/*------------------------------------------------------------
	Flex Box
------------------------------------------------------------*/
.sign {
  overflow: hidden;
  padding-bottom: 8.5rem;
  padding-top: 8rem; }
  @media screen and (max-width: 1250.98px) {
    .sign {
      padding-bottom: 2rem; } }
  @media screen and (max-width: 1100.98px) {
    .sign {
      padding-bottom: 0; } }
  @media screen and (max-width: 991.98px) {
    .sign {
      padding-bottom: 8rem; } }
  @media screen and (max-width: 575.98px) {
    .sign {
      padding-bottom: 5rem; } }

.sign-form {
  width: 40%;
  margin-right: auto;
  margin-left: auto; }
  .sign-form_inner {
    padding: 3.5rem;
    border-radius: 1.4172rem;
    border: 0.709px solid #000;
    background: #fff; }
  .sign-form_heading {
    text-align: center;
    margin-bottom: 3.5rem; }
  .sign-form .btn {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.8rem; }
    .sign-form .btn img {
      margin-top: -0.2rem;
      width: 2rem;
      height: 2rem; }
  @media screen and (max-width: 1199.98px) {
    .sign-form {
      width: calc(45% - 2rem); }
      .sign-form_inner {
        padding: 2rem 1.5rem; } }
  @media screen and (max-width: 991.98px) {
    .sign-form {
      width: 100%; } }

.sign-title {
  color: #000000;
  font-size: 2.4rem;
  font-weight: 600;
  margin-bottom: 0.8rem; }
  @media only screen and (max-width: 1200px) {
    .sign-title {
      font-size: 2rem; } }
  @media only screen and (max-width: 800px) {
    .sign-title {
      font-size: 1.7rem; } }

.sign-desc {
  color: #4c4c4d;
  font-size: 1.5rem; }

.has-account {
  color: #000000;
  text-align: center;
  font-size: 1.3rem; }
  .has-account_link {
    display: inline-flex;
    align-items: center;
    transition: 0.5s ease; }
    .has-account_link span {
      text-decoration: underline; }
    .has-account_link img {
      transition: 0.5s ease; }
    .has-account_link:hover {
      color: #90ab2a; }
      .has-account_link:hover img {
        transform: translateX(0.3rem);
        filter: brightness(0) saturate(100%) invert(51%) sepia(65%) saturate(1902%) hue-rotate(41deg) brightness(96%) contrast(101%); }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
